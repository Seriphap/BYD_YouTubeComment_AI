import streamlit as st
import pandas as pd
import requests
import io
from comment_fetcher import get_all_comments
from google import genai

# ‡πÇ‡∏´‡∏•‡∏î API key ‡∏à‡∏≤‡∏Å .streamlit/secrets.toml
YOUTUBE_API_KEY = st.secrets["YOUTUBE_API_KEY"]
GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client Gemini
client = genai.Client(api_key=GEMINI_API_KEY)

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ YouTube video ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
video_ids = ["OMV9F9zB4KU", "87lJCDADWCo", "CbkX7H-0BIU"]

st.header("ü§ñ Analysis of BYD YouTube Comment Using Gemini-2.0-Flash")

#display video
st.subheader("‚ñ∂Ô∏è Video Reference üî¥")

# ‡πÅ‡∏ö‡πà‡∏á layout ‡πÄ‡∏õ‡πá‡∏ô 3 column
col1, col2, col3 = st.columns(3)

with col1:
    st.video(f"https://www.youtube.com/watch?v={video_ids[0]}")
    st.caption("video 1")

with col2:
    st.video(f"https://www.youtube.com/watch?v={video_ids[1]}")
    st.caption("video 2")

with col3:
    st.video(f"https://www.youtube.com/watch?v={video_ids[2]}")
    st.caption("vidio 3")

with st.sidebar:
    st.subheader("üìú Conversations History ")

    if st.session_state.get("qa_history"):
        for i, item in enumerate(reversed(st.session_state.qa_history[-5:]), 1):
            st.markdown(f"**{i}. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:** {item['question']}")
            st.markdown(f"‚úçÔ∏è ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {item['answer'][:150]}...")
            st.markdown("---")

        if st.button("üóëÔ∏è Clear Conversations History"):
            st.session_state.qa_history = []
    else:
        st.info("No Conversations History")

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å input
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô", [
    "üìÅ Access Stored Data from Jun 04, 2025",
    "üîÑ Retrieve the Latest YouTube Comments"
])

df = None

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Google Drive CSV ---
if option == "üìÅ Access Stored Data from Jun 04, 2025":
    file_id = "1anFtZ68jj6GQ5NijicTaJkxxiMo66vUx"
    download_url = f"https://drive.google.com/uc?id={file_id}&export=download"

    try:
        st.info("üîÑ Loading...")
        response = requests.get(download_url)
        response.raise_for_status()
        df = pd.read_csv(io.BytesIO(response.content))
        st.success(f"‚úÖ Done: {len(df)} Comments")
    except Exception as e:
        st.error(f"‚ùå File can not download: {e}")
        st.stop()

# --- 2. ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å YouTube ---
elif option == "üîÑ Retrieve the Latest YouTube Comments":
    if st.button("üì• Loading..."):
        with st.spinner("‚è≥ Loading comment from YouTube..."):
            df = get_all_comments(video_ids, YOUTUBE_API_KEY)
            df.to_csv("youtube_comments.csv", index=False)
            st.success(f"‚úÖ Done: {len(df)} Comments")
    else:
        st.warning("üëÜ please click the botton to retrieve the comments")
        st.stop()

# --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini ---
if df is not None and not df.empty:
    st.subheader("ü§ñ Ask AI")
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    #------------
    st.markdown("üí° **Suggested Questions**")
    suggestions = {
        "üìà ‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? (Sentiment)": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ (positive / negative / neutral) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô",
        "üí¨ ‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?": "‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ú‡∏π‡πâ‡∏ä‡∏°‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÉ‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö",
        "üéØ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ / ‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå": "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ",
    }
    if "selected_prompt" not in st.session_state:
        st.session_state.selected_prompt = ""

    cols = st.columns(len(suggestions))
    for i, (label, prompt_text) in enumerate(suggestions.items()):
        if cols[i].button(label):
            st.session_state.selected_prompt = prompt_text

    #------------
    # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    question = st.text_area(
    "üí¨ Your Question",
    value=st.session_state.selected_prompt,
    placeholder="Example: What are people saying about BYD ?"
    )
    
    #------
    if st.button("üöÄ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini AI"):
        if df is not None and question:
            with st.spinner("üîç AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                comments_text = "\n".join(df["comment"].astype(str).tolist())[:30000]

                prompt = f"""
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏° YouTube:
                {comments_text}

                ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
                {question}
                """

                try:
                    response = client.models.generate_content(
                        model="gemini-2.0-flash",
                        contents=prompt.strip()
                    )

                    answer = response.text
                    st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.subheader("üìä ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Gemini:")
                    st.write(answer)

                    # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô history
                    if "qa_history" not in st.session_state:
                        st.session_state.qa_history = []

                    st.session_state.qa_history.append({
                        "question": question,
                        "answer": answer
                    })
                    
                    st.session_state.selected_prompt = ""  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå prompt suggestion ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå

                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Gemini: {e}")

        #------
   

